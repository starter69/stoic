require 'rails_helper'

# Matthias: FactoryBot, 3 core methods for building: create, build, and build_stubb. First use create to have most confidence. Build_stubb is less expensive as it does not save to the database. It creates a 'fake' id for the Model to talk to for associations etc.

# Elements of Model Tests, According to Everyday RSpec, 2017:
# 1. When instantiated with valid attributes, a model should be valid
# 2. Data that fails validations should not be valid.
# 3. Instance methods perform as expected.
# 4. Class methods perform as expected.

describe Quotation, type: :model do
  # Setup before block creating INSTANCE Variable-saved factories I can reuse. Note, According to Everyday RSpec,if not set as INSTANCE Variables, naturally, local variables won't work throughout the Quotation RSpec class.
  before(:all) do
    @quotation = FactoryBot.create(:quotation, :tag)
    @tags = @quotation.tags
  end

  # Test setup i.e. FactoryBot Works with this Model
  it 'has a valid factory' do
    # Given and When (In this case combined)
    fake_factory_bot_generated_quotation_object = FactoryBot.build(:quotation)
    fake_factory_bot_generated_tag_object = FactoryBot.build(:tag)
    # Then
    expect(fake_factory_bot_generated_quotation_object).to be_valid
    expect(fake_factory_bot_generated_tag_object).to be_valid
    # Also test the @tags generated by the FactorBot trait / association on quotation factory
    expect(@tags.first).to be_valid
  end

  # 1. When instantiated with valid attributes, a model should be valid
  # aka, testing the ability to save to the columns in the database along the lines of this model
  it 'persists a valid model object when given a title, passage and a published status' do
    quotation = Quotation.new(
      title: 'Nietzschelied',
      passage: 'Der Übermensch ist der Sinn der Erde. Euer Wille sage: der Übermensch sei der Sinn der Erde!',
      publish: true
    )
    expect(quotation).to be_valid
  end
  # 2. Data that fails validations should not be valid.
  # (Empty - bc there are no validations on this model)

  # 3 Instance methods perform as expected.
  # 3.1 Starting with Simple Automatic ActiveRecord ones, of returning saved attributes
  context 'classic Active Record instance methods' do
    it 'returns a title' do
      expect(@quotation.title).to eq 'Aurelius Dankenliste'
    end

    it 'returns a passage' do
      expect(@quotation.passage).to include 'Andenken meines Vaters'
    end

    it 'returns boolean true/false whether published or not' do
      expect(@quotation.publish).to eq true
    end
  end

  # 3.2 - Now Going In-Depth Into More Complex, Custom Instance Methods
  describe 'tag-related instance methods' do
    context 'find quotations given tag(s)' do
      it '#tagged_with - when given a particular tag, returns all quotations attached to it in the database' do
        binding.pry
        expect(Quotation.tagged_with(@tags.first.name).first.title).to eq('Aurelius Dankenliste')
      end

      it '#find_quotations_with - when given a LIST of tags, find all quotations attached to all of the tags in the database' do
        expect(Quotation.find_quotations_with(@tags).first.title).to eq('Aurelius Dankenliste')
      end
    end
    context 'find tags given quotation(s)' do
      it '#tag_list - when given a particular quotation, finds a list of all the TAGS associated with it' do
        expect(@quotation.tag_list).to include('Roman')
      end

      it 'using ActiveRecord find_or_create! method creates or assigns tag(s) given when a quotation is created' do
        @quotation.tag_list = 'Phoenician Wisdom'
        expect(@quotation.tag_list).to include('Phoenician Wisdom')
      end
    end
  end
end
